// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Fuen31HotelAPI.Models;

public partial class dbHotelContext : DbContext
{
    public dbHotelContext()
    {
    }

    public dbHotelContext(DbContextOptions<dbHotelContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BusRoute> BusRoutes { get; set; }

    public virtual DbSet<BusTracker> BusTrackers { get; set; }

    public virtual DbSet<CarCartItem> CarCartItems { get; set; }

    public virtual DbSet<CarMaintenance> CarMaintenances { get; set; }

    public virtual DbSet<CarManagement> CarManagements { get; set; }

    public virtual DbSet<CarOrder> CarOrders { get; set; }

    public virtual DbSet<CarOrderItem> CarOrderItems { get; set; }

    public virtual DbSet<CarPrice> CarPrices { get; set; }

    public virtual DbSet<CarResponsible> CarResponsibles { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=sparkle206-sparkle.myftp.biz;Initial Catalog=dbHotel;User ID=hotel;Password=fuen31");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BusRoute>(entity =>
        {
            entity.HasIndex(e => new { e.StarterStop, e.DestinationStop }, "UC_StarterDestination").IsUnique();

            entity.Property(e => e.DestinationLatitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DestinationLongtitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DestinationStop)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StarterLatitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StarterLongtitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StarterStop)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<BusTracker>(entity =>
        {
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarCartItem>(entity =>
        {
            entity.Property(e => e.DestinationLatitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DestinationLongtitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PickUpLatitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PickUpLongtitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<CarMaintenance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Maintenance");

            entity.ToTable("CarMaintenance");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Expense).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<CarManagement>(entity =>
        {
            entity.Property(e => e.Brand)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CarIdentity)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CarModel)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Goal)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarOrder>(entity =>
        {
            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarOrderItem>(entity =>
        {
            entity.Property(e => e.SubTotal).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<CarPrice>(entity =>
        {
            entity.Property(e => e.HighDistance)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LowDistance)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<CarResponsible>(entity =>
        {
            entity.ToTable("CarResponsible");

            entity.HasOne(d => d.Car).WithMany(p => p.CarResponsibles)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarResponsible_CarId");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}